suite: simple-app simple case

values:
  - simple-values.yaml

release:
  name: simple
  namespace: default

chart:
  version: 0.0.0

tests:
  - it: All manifests should match snapshot
    templates:
      - deployment.yaml
      - service.yaml
      - ingress.yaml
      - serviceaccount.yaml
    asserts:
      - matchSnapshot: {}

  - it: Deployment should be named as release
    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: simple

  - it: Deployment image tag should be set correctly
    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].image
          value: test:1.1.1

  - it: Deployment simple port specification should work correctly
    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].ports
          value:
            - containerPort: 9000
              name: http
              protocol: TCP

  - it: Deployment should have readinessProbe set correctly by default
    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet
          value:
            path: /
            port: http
  
  - it: Deployment should have livenessProbe set correctly by default
    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet
          value:
            path: /
            port: http

  - it: Deployment should use imagePullSecrets if specified
    template: deployment.yaml
    set:
      imagePullSecrets:
        - name: test
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.imagePullSecrets
          value:
            - name: test

  - it: Deployment should mount shared memory volume if shmMem specified
    template: deployment.yaml
    set:
      shmSize: 1Gi
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0]
          value:
            mountPath: /dev/shm
            name: shared-memory
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            emptyDir:
              medium: Memory
              sizeLimit: 1Gi
            name: shared-memory

  - it: Deployment should correctly set livenessProbe path
    template: deployment.yaml
    set:
      livenessProbe:
        httpGet:
          path: /test
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /test

  - it: Deployment should have correctly mounted configs
    template: deployment.yaml
    set:
      configs:
        - name: test.json
          mountPath: /etc/test.json
          value: |
            {
              "test": "test"
            }
        - name: test2.json
          value: |
            {
              "test2": "test2"
            }
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1]
          value:
            mountPath: /etc/test.json
            name: configs
            subPath: test.json
            readOnly: true
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[2]
          value:
            mountPath: /configs/test2.json
            name: configs
            subPath: test2.json
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            configMap:
              name: simple
            name: configs

  - it: Service should be named as release
    template: service.yaml
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.name
          value: simple

  - it: Service simple port specification should work correctly
    template: service.yaml
    asserts:
      - isKind:
          of: Service
      - equal:
          path: spec.ports
          value:
            - name: http
              port: 80
              protocol: TCP
              targetPort: http

  - it: Service should use custom port
    template: service.yaml
    set:
      servicePort: 7000
    asserts:
      - isKind:
          of: Service
      - equal:
          path: spec.ports[0].port
          value: 7000

  - it: Ingress should be named as release
    template: ingress.yaml
    set:
      domain: example.com
      ingress.enabled: true
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: metadata.name
          value: simple

  - it: Ingress should use default service port if not specified
    template: ingress.yaml
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 80

  - it: Ingress should use custom service port
    template: ingress.yaml
    set:
      servicePort: 7000
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 7000

  - it: Deployment should have correctly mounted volumes with pvc
    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0]
          value:
            mountPath: /data
            name: data
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: data
            persistentVolumeClaim:
              claimName: simple-data

  - it: Deployment should have correctly mounted volumes without pvc
    template: deployment.yaml
    set:
      volumes:
        - name: data
          size: 1Gi
          mountPath: /data
          emptyDir: true
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0]
          value:
            mountPath: /data
            name: data
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: data
            emptyDir:
              sizeLimit: 1Gi

  - it: PVC should not be created if emptyDir
    template: pvc.yaml
    set:
      volumes:
        - name: data
          size: 1Gi
          mountPath: /data
          emptyDir: true
    asserts:
      - hasDocuments:
          count: 0

  - it: PVC should have correctly mounted volumes with pvc
    template: pvc.yaml
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: spec.resources.requests.storage
          value: 1Gi

  - it: PVC should have correctly mounted volumes without pvc
    template: pvc.yaml
    set:
      volumes:
        - name: data
          size: 1Gi
          mountPath: /data
          emptyDir: true
    asserts:
      - hasDocuments:
          count: 0

  - it: Gateway should enable HTTPRoute
    template: httproute.yaml
    set:
      domain: example.com
      gateway:
        enabled: true
        name: "external-gateway"
    asserts:
      - isKind:
          of: HTTPRoute
      - equal:
          path: metadata.name
          value: simple

  - it: Spread service across nodes
    template: deployment.yaml
    set:
      spreadServiceAcrossNodes: true
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.topologySpreadConstraints
          value:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              nodeTaintsPolicy: Honor
              whenUnsatisfiable: ScheduleAnyway
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: simple
                  app.kubernetes.io/name: simple-app

  - it: Deployment should have initContainer
    template: deployment.yaml
    set:
      initContainers:
        - name: init-container
          image: "test:1.0.0"
          imagePullPolicy: Always
          command: ["service"]
          env:
            - name: MY_ENV
              value: "my_value"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.initContainers
          value:
            - name: init-container
              image: "test:1.0.0"
              imagePullPolicy: Always
              command: [ "service" ]
              env:
                - name: MY_ENV
                  value: "my_value"