# yaml-language-server: $schema=values.schema.json

# Default values for simple-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

domain: ""

image:
  repository: ""
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []

# Port that container listens on
port: 8000

# Timeout, applies for deployment modes where applicable
timeoutSec: 30

# Path to probe for both liveness and readiness
probe:
  path: "/"

# backendTimeout: 30s

# Port that service should listen on
servicePort: 80
serviceType: ClusterIP  # Service type

# Extra ports to expose from the container on the service
extraPorts: []
#  - name: grpc
#    port: 50051
#    servicePort: ""
#    protocol: TCP

# Environment variables for container
env: []

command: []
# - command
# - to
# - run

initJob:
  # If enabled, creates Job that executes after all resources are installed or upgraded in Kubernetes
  enabled: false
  # Required parameter. The command that the hook runs
  command: []
  #  Hook repository. Default: Values.image.repository
  #  repository: ""
  #  Hook tag. Default: Values.image.tag
  #  tag: ""
  #  Hook pullPolicy. Default: Values.image.pullPolicy
  #  pullPolicy: ""
  #  Hook environment variables. Default: Values.env
  #  env: []
  #  Hook resources. Default: {}
  #  resources: {}

# Amount of shared memory to allocate for the container
# If not set, the default is 64Mi
shmSize: ""

volumes: []
  # if "hostPath" is set, it won't create anything, just mount hostPath on host to mountPath in container
  # - name: data
  #   mountPath: /data
  #   hostPath: /home/ml/stuff

  # if "size" is set, it will create a PVC
  # - name: data
  #   size: 1Gi
  #   mountPath: /data

  # if "emptyDir" is set, it will create an emptyDir
  # - name: cache
  #   emptyDir: true
  #   size: 1Gi
  #   mountPath: /cache

  # if "secret" is set, it will use the secret
  # - name: secret
  #   secret:
  #     secretName: secret
  #   mountPath: /secret

  # if "configMap" is set, it will use the configMap
  # - name: config
  #   configMap:
  #     name: config
  #   mountPath: /config


configs: []
  # - name: conn.json
  #   mountPath: /etc/conn.json
  #   value: |
  #     {
  #       "client": "pg",
  #       "connection": {
  #       }
  #     }

livenessProbe: {}
  # httpGet:
  #   path: /
  #   port: http
  # initialDelaySeconds: 5
  # timeoutSeconds: 1
  # periodSeconds: 10
  # successThreshold: 1
  # failureThreshold: 3

readinessProbe: {}
  # httpGet:
  #   path: /
  #   port: http
  # initialDelaySeconds: 5
  # timeoutSeconds: 1
  # periodSeconds: 10
  # successThreshold: 1
  # failureThreshold: 3

replicaCount: 1

serviceAccount: {}
  ## Specifies whether a service account should be created
  # create: true
  ## Annotations to add to the service account
  # annotations: {}
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  # name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false

  # True if target ingress is Nginx (alters path definition and annotation)
  nginx: false
  className: ""

  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

gateway:
  # If enabled, creates HTTPRoute which uses given gateway
  enabled: false

  # Name of gateway to be used
  name: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# If set, create topologySpreadConstraints to spread the pods across nodes
spreadServiceAcrossNodes: false

# Settings specific to GKE deployment
gke:
  # If enabled and gateway.enabled is true, creates GCPBackendPolicy and
  # HealthCheck for service
  enabled: false

  managedCertificate:
    enabled: false

  iap:
    enabled: false
    clientID: ""
    oauth2ClientSecret: ""

  monitoring:
    enabled: false
    path: "/metrics"
    interval: "30s"

monitoringCoreos:
  # If enabled, creates ServiceMonitor for Prometheus Operator
  enabled: false
  path: "/metrics"
  port: http


####
global:
  serviceAccount: {}
